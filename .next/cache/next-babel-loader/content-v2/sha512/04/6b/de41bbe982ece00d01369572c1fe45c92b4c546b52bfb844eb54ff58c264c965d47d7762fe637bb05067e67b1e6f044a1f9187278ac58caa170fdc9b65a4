{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\OneDrive\\\\Documents\\\\quote-generator\\\\pages\\\\[authorId].js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport classes from \"../styles/Author.module.css\";\nimport Card from \"../components/Card\";\nexport default function Author() {\n  _s();\n\n  var _this = this;\n\n  var router = useRouter();\n  var authorId = router.query.authorId;\n\n  var _useState = useState([]),\n      quotes = _useState[0],\n      setQuotes = _useState[1];\n\n  useEffect(function () {\n    if (authorId) {\n      fetch(\"https://quote-garden.onrender.com/api/v3/quotes?author=\".concat(authorId)).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return setQuotes(data.data);\n      });\n    }\n  }, [authorId]);\n\n  if (quotes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: classes.title,\n      children: quotes[0].quoteAuthor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), quotes.map(function (quote) {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        children: quote.quoteText\n      }, quote._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Author, \"e6gLEixTDZEGHGqQWscVHKQtdE0=\", false, function () {\n  return [useRouter];\n});\n\n_c = Author;\n\nvar _c;\n\n$RefreshReg$(_c, \"Author\");","map":{"version":3,"sources":["C:/Users/ASUS/OneDrive/Documents/quote-generator/pages/[authorId].js"],"names":["React","useEffect","useState","useRouter","classes","Card","Author","router","authorId","query","quotes","setQuotes","fetch","then","response","json","data","length","title","quoteAuthor","map","quote","quoteText","_id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAAA;;AAC/B,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AAD+B,MAEvBK,QAFuB,GAEVD,MAAM,CAACE,KAFG,CAEvBD,QAFuB;;AAAA,kBAGHN,QAAQ,CAAC,EAAD,CAHL;AAAA,MAGxBQ,MAHwB;AAAA,MAGhBC,SAHgB;;AAK/BV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,QAAJ,EAAc;AACZI,MAAAA,KAAK,kEACuDJ,QADvD,EAAL,CAGGK,IAHH,CAGQ,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OAHR,EAIGF,IAJH,CAIQ,UAACG,IAAD;AAAA,eAAUL,SAAS,CAACK,IAAI,CAACA,IAAN,CAAnB;AAAA,OAJR;AAKD;AACF,GARQ,EAQN,CAACR,QAAD,CARM,CAAT;;AAUA,MAAIE,MAAM,CAACO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAEb,OAAO,CAACc,KAAvB;AAAA,gBAA+BR,MAAM,CAAC,CAAD,CAAN,CAAUS;AAAzC;AAAA;AAAA;AAAA;AAAA,YADF,EAEGT,MAAM,CAACU,GAAP,CAAW,UAACC,KAAD;AAAA,0BACV,QAAC,IAAD;AAAA,kBAAuBA,KAAK,CAACC;AAA7B,SAAWD,KAAK,CAACE,GAAjB;AAAA;AAAA;AAAA;AAAA,eADU;AAAA,KAAX,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA3BuBjB,M;UACPH,S;;;KADOG,M","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport classes from \"../styles/Author.module.css\";\r\nimport Card from \"../components/Card\";\r\n\r\nexport default function Author() {\r\n  const router = useRouter();\r\n  const { authorId } = router.query;\r\n  const [quotes, setQuotes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (authorId) {\r\n      fetch(\r\n        `https://quote-garden.onrender.com/api/v3/quotes?author=${authorId}`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => setQuotes(data.data));\r\n    }\r\n  }, [authorId]);\r\n\r\n  if (quotes.length === 0) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2 className={classes.title}>{quotes[0].quoteAuthor}</h2>\r\n      {quotes.map((quote) => (\r\n        <Card key={quote._id}>{quote.quoteText}</Card>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}